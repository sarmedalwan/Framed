package computeSimilarities;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

public class SortAlgorithm {

	public static void main(String[] args) {
		
		System.out.print("hello,Peng!\n"); //TESTING
		HashMap<String, Integer> wordsIn1stDocument=new HashMap<String, Integer>(); //Create Hashmap to represent all of the words in the PDF and their frequencies
		wordsIn1stDocument.put("apple", 10);
		wordsIn1stDocument.put("orange", 12);
		wordsIn1stDocument.put("tiger", 32);
		wordsIn1stDocument.put("pipe", 3);
		PDF pdf1=new PDF("PDF1 ",wordsIn1stDocument); //Create PDF object for testing, give it a name and the Hashmap of words

		HashMap<String, Integer> wordsin2ndDocument=new HashMap<String, Integer>();
		wordsin2ndDocument.put("apple", 32);
		wordsin2ndDocument.put("orange", 4);
		wordsin2ndDocument.put("sticker", 3);
		PDF pdf2=new PDF("PDF2 ",wordsin2ndDocument);

		HashMap<String, Integer> wordsin3rdDocument=new HashMap<String, Integer>();
		wordsin3rdDocument.put("apple", 65);
		wordsin3rdDocument.put("gary", 10);
		wordsin3rdDocument.put("pipe", 23);
		PDF pdf3=new PDF("PDF3 ",wordsin3rdDocument);

		HashMap<String, Integer> wordsin4thDocument=new HashMap<String, Integer>();
		wordsin4thDocument.put("peng", 10);
		wordsin4thDocument.put("orange", 33);
		PDF pdf4=new PDF("PDF4 ",wordsin4thDocument);

		HashMap<String, Integer> wordsin5thDocument=new HashMap<String, Integer>();
		wordsin5thDocument.put("gary", 10);
		wordsin5thDocument.put("stiker", 19);
		wordsin5thDocument.put("happy", 32);
		wordsin5thDocument.put("worry",11);
		PDF pdf5=new PDF("PDF5 ",wordsin5thDocument);
				
		PDF[] listOfPDFs=new PDF[] {pdf1,pdf2,pdf3,pdf4,pdf5};

		ArrayList<SimilarPDF> similar=SortBubble(listOfPDFs);
		ArrayList<SimilarPDF> result=sortAcorSimilar(similar);
		ArrayList<SimilarPDF> newResult=NewBean(result);
		
		for(int i=0;i<newResult.size();++i)
		{
		System.out.println("remove repeat element array:Similarity from high to low "+newResult.get(i).pdf1.name+"::"+newResult.get(i).pdf2.name+"array size:"+newResult.get(i).similarValue);
		}
	
		System.out.println("Test Similarity "+GetSimilarity(wordsIn1stDocument, wordsin2ndDocument));
		
	}
	// remove the repeated bean
		public  static ArrayList<SimilarPDF> NewBean(ArrayList<SimilarPDF>  array)
		{
			for (int i = 0; i < array.size()-1; i++) {
	            for (int j = array.size()-1; j > i; j--) {
	                if (array.get(j).pdf1 == array.get(i).pdf1 &&array.get(j).pdf2 == array.get(i).pdf2 &&array.get(j).similarValue == array.get(i).similarValue ) {
	                	array.remove(j);
	                }
	            }
	        }				
			return  array;
	 	}
	//Computing the similarity 
	public static int GetSimilarity(HashMap<String, Integer> map1, HashMap<String, Integer> map2) 
	{
		int result=0;
		if (map1 != null && map2 != null) {
			//System.out.print("Got in\n");
			Iterator iter = map1.entrySet().iterator();
			while (iter.hasNext()) {
			Map.Entry entry1 = (Map.Entry) iter.next();
			Object key = entry1.getKey();
			Object val = entry1.getValue();
			//System.out.print(key.toString()+val+"\n");
			if(map2.containsKey(key)) {
				int temp = Math.min((int)val,map2.get(key));    
				int distance=  Math.max((int)val,map2.get(key))-temp;
				result+=temp-distance;
			//	System.out.print(temp+":"+distance+":"+result+"\n");
			}else
			{
				result-=(int)val;
			}			
			}
			for (Entry<String, Integer> entry2 : map2.entrySet())
			{				
			if(!map1.containsKey(entry2.getKey())) 
			{
					result-=entry2.getValue();	
				}
			}
		}
		return result;
	}
	//List pdf document order by similarity
	public static  ArrayList<SimilarPDF> sortAcorSimilar(ArrayList<SimilarPDF> array)
	{
		System.out.println("before pdf document been ordered : Data size "+array.size());
		for (SimilarPDF similarPDF : array) {
			System.out.println(" PDF document"+similarPDF.pdf1.name+" and "+similarPDF.pdf2.name+" similarValue "+similarPDF.similarValue);
		}
		 Collections.sort(array,new Comparator<SimilarPDF>()
		 {
			 @Override
			public int compare(SimilarPDF o1, SimilarPDF o2) {
				// TODO Auto-generated method stub
				return o2.similarValue-o1.similarValue;
			}
		});
			System.out.println("After PDF documents have been ordered: ");
			for (SimilarPDF similarPDF : array) {
				System.out.println("PDF document  "+similarPDF.pdf1.name+" and "+similarPDF.pdf2.name+" similarValue "+similarPDF.similarValue);
			}
			return array;
	}
	//reversal bubble sort
	public static ArrayList<SimilarPDF> SortBubble(PDF[] pdfs){
		ArrayList<SimilarPDF>  similar=new ArrayList<SimilarPDF>();
		 if(pdfs==null||pdfs.length==0){  
	            return null;  
	        }  
		 	PDF pdf =null;  
		 
		 	for (int i = 0; i < pdfs.length-1; i++) {
	            for (int j = pdfs.length-1; j > i; j--) {
				SimilarPDF similarPDF=new SimilarPDF(pdfs[j],pdfs[i],GetSimilarity(pdfs[j].words, pdfs[i].words));
				//if(similar)
				similar.add(similarPDF);			
			}
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		}
		return similar;
	}
}

